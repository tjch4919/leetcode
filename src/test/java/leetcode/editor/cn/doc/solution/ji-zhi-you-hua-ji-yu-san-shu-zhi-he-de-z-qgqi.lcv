## 前置题目

请先完成 [15. 三数之和](https://leetcode.cn/problems/3sum/)。

[视频讲解](https://www.bilibili.com/video/BV1bP411c7oJ/)，[代码](https://leetcode.cn/problems/3sum/solution/shuang-zhi-zhen-xiang-bu-ming-bai-yi-ge-pno55/)

## 思路

思路和 [15. 三数之和](https://leetcode.cn/problems/3sum/solution/shuang-zhi-zhen-xiang-bu-ming-bai-yi-ge-pno55/) 类似，排序后，枚举 $\textit{nums}[i]$ 作为第一个数，那么问题变成找到另外两个数，使得这三个数的和与 $\textit{target}$ 最接近，这同样可以用**双指针**解决。

设 $s=\textit{nums}[i]+\textit{nums}[j]+\textit{nums}[k]$，为了判断 $s$ 是不是与 $\textit{target}$ 最近的数，我们还需要用一个变量 $\textit{minDiff}$ 维护 $|s-\textit{target}|$ 的最小值。分类讨论：

- 如果 $s=\textit{target}$，那么答案就是 $s$，直接返回 $s$。
- 如果 $s>\textit{target}$，那么如果 $s-\textit{target}< \textit{minDiff}$，说明找到了一个与 $\textit{target}$ 更近的数，更新 $\textit{minDiff}$ 为 $s-\textit{target}$，更新答案为 $s$。然后和三数之和一样，把 $k$ 减一。
- 否则 $s<\textit{target}$，那么如果 $\textit{target}-s< \textit{minDiff}$，说明找到了一个与 $\textit{target}$ 更近的数，更新 $\textit{minDiff}$ 为 $\textit{target}-s$，更新答案为 $s$。然后和三数之和一样，把 $j$ 加一。

除此以外，还有以下几个优化：

1. 设 $s=\textit{nums}[i]+\textit{nums}[i+1]+\textit{nums}[i+2]$。如果 $s > \textit{target}$，由于数组已经排序，后面无论怎么选，选出的三个数的和不会比 $s$ 还小，所以不会找到比 $s$ 更优的答案了。所以只要 $s > \textit{target}$，就可以直接 `break` 外层循环了。在 `break` 前判断 $s$ 是否离 $\textit{target}$ 更近，如果更近，那么更新答案为 $s$。

2. 设 $s=\textit{nums}[i]+\textit{nums}[n-2]+\textit{nums}[n-1]$。如果 $s < \textit{target}$，由于数组已经排序，$\textit{nums}[i]$ 加上后面任意两个数都不超过 $s$，所以下面的双指针就不需要跑了，无法找到比 $s$ 更优的答案。但是后面还有更大的 $\textit{nums}[i]$，可能找到一个离 $\textit{target}$ 更近的三数之和，所以还需要继续枚举，`continue` 外层循环。在 `continue` 前判断 $s$ 是否离 $\textit{target}$ 更近，如果更近，那么更新答案为 $s$，更新 $\textit{minDiff}$ 为 $\textit{target}-s$。

3. 如果 $i>0$ 且 $\textit{nums}[i]=\textit{nums}[i-1]$，那么 $\textit{nums}[i]$ 和后面数字相加的结果，必然在之前算出过，所以无需跑下面的双指针，直接 `continue` 外层循环。（可以放在循环开头判断。）

* [sol-Python3]

```py
class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        n = len(nums)
        min_diff = inf
        for i in range(n - 2):
            x = nums[i]
            if i and x == nums[i - 1]:
                continue  # 优化三

            # 优化一
            s = x + nums[i + 1] + nums[i + 2]
            if s > target:  # 后面无论怎么选，选出的三个数的和不会比 s 还小
                if s - target < min_diff:
                    ans = s  # 由于下一行直接 break，这里无需更新 min_diff
                break

            # 优化二
            s = x + nums[-2] + nums[-1]
            if s < target:  # x 加上后面任意两个数都不超过 s，所以下面的双指针就不需要跑了
                if target - s < min_diff:
                    min_diff = target - s
                    ans = s
                continue

            # 双指针
            j, k = i + 1, n - 1
            while j < k:
                s = x + nums[j] + nums[k]
                if s == target:
                    return s
                if s > target:
                    if s - target < min_diff:  # s 与 target 更近
                        min_diff = s - target
                        ans = s
                    k -= 1
                else:  # s < target
                    if target - s < min_diff:  # s 与 target 更近
                        min_diff = target - s
                        ans = s
                    j += 1
        return ans
```

* [sol-Java]

```java
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int ans = 0, n = nums.length;
        int minDiff = Integer.MAX_VALUE;
        for (int i = 0; i < n - 2; i++) {
            int x = nums[i];
            if (i > 0 && x == nums[i - 1]) {
                continue; // 优化三
            }

            // 优化一
            int s = x + nums[i + 1] + nums[i + 2];
            if (s > target) { // 后面无论怎么选，选出的三个数的和不会比 s 还小
                if (s - target < minDiff) {
                    ans = s; // 由于下面直接 break，这里无需更新 minDiff
                }
                break;
            }

            // 优化二
            s = x + nums[n - 2] + nums[n - 1];
            if (s < target) { // x 加上后面任意两个数都不超过 s，所以下面的双指针就不需要跑了
                if (target - s < minDiff) {
                    minDiff = target - s;
                    ans = s;
                }
                continue;
            }

            // 双指针
            int j = i + 1, k = n - 1;
            while (j < k) {
                s = x + nums[j] + nums[k];
                if (s == target) {
                    return target;
                }
                if (s > target) {
                    if (s - target < minDiff) { // s 与 target 更近
                        minDiff = s - target;
                        ans = s;
                    }
                    k--;
                } else { // s < target
                    if (target - s < minDiff) { // s 与 target 更近
                        minDiff = target - s;
                        ans = s;
                    }
                    j++;
                }
            }
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int threeSumClosest(vector<int> &nums, int target) {
        sort(nums.begin(), nums.end());
        int ans, n = nums.size();
        int min_diff = INT_MAX;
        for (int i = 0; i < n - 2; i++) {
            int x = nums[i];
            if (i > 0 && x == nums[i - 1]) {
                continue; // 优化三
            }

            // 优化一
            int s = x + nums[i + 1] + nums[i + 2];
            if (s > target) { // 后面无论怎么选，选出的三个数的和不会比 s 还小
                if (s - target < min_diff) {
                    ans = s; // 由于下面直接 break，这里无需更新 min_diff
                }
                break;
            }

            // 优化二
            s = x + nums[n - 2] + nums[n - 1];
            if (s < target) { // x 加上后面任意两个数都不超过 s，所以下面的双指针就不需要跑了
                if (target - s < min_diff) {
                    min_diff = target - s;
                    ans = s;
                }
                continue;
            }

            // 双指针
            int j = i + 1, k = n - 1;
            while (j < k) {
                s = x + nums[j] + nums[k];
                if (s == target) {
                    return target;
                }
                if (s > target) {
                    if (s - target < min_diff) { // s 与 target 更近
                        min_diff = s - target;
                        ans = s;
                    }
                    k--;
                } else { // s < target
                    if (target - s < min_diff) { // s 与 target 更近
                        min_diff = target - s;
                        ans = s;
                    }
                    j++;
                }
            }
        }
        return ans;
    }
};
```

* [sol-Go]

```go
func threeSumClosest(nums []int, target int) (ans int) {
    sort.Ints(nums)
    n := len(nums)
    minDiff := math.MaxInt
    for i, x := range nums[:n-2] {
        if i > 0 && x == nums[i-1] {
            continue // 优化三
        }

        // 优化一
        s := x + nums[i+1] + nums[i+2]
        if s > target { // 后面无论怎么选，选出的三个数的和不会比 s 还小
            if s-target < minDiff {
                ans = s // 由于下面直接 break，这里无需更新 minDiff
            }
            break
        }

        // 优化二
        s = x + nums[n-2] + nums[n-1]
        if s < target { // x 加上后面任意两个数都不超过 s，所以下面的双指针就不需要跑了
            if target-s < minDiff {
                minDiff = target - s
                ans = s
            }
            continue
        }

        // 双指针
        j, k := i+1, n-1
        for j < k {
            s = x + nums[j] + nums[k]
            if s == target {
                return target
            }
            if s > target {
                if s-target < minDiff { // s 与 target 更近
                    minDiff = s - target
                    ans = s
                }
                k--
            } else { // s < target
                if target-s < minDiff { // s 与 target 更近
                    minDiff = target - s
                    ans = s
                }
                j++
            }
        }
    }
    return ans
}
```

* [sol-JavaScript]

```js
var threeSumClosest = function (nums, target) {
    nums.sort((a, b) => a - b);
    const n = nums.length;
    let ans = 0;
    let minDiff = Number.MAX_SAFE_INTEGER;
    for (let i = 0; i < n - 2; i++) {
        const x = nums[i];
        if (i > 0 && x === nums[i - 1]) {
            continue; // 优化三
        }

        // 优化一
        let s = x + nums[i + 1] + nums[i + 2];
        if (s > target) { // 后面无论怎么选，选出的三个数的和不会比 s 还小
            if (s - target < minDiff) {
                ans = s; // 由于下面直接 break，这里无需更新 minDiff
            }
            break;
        }

        // 优化二
        s = x + nums[n - 2] + nums[n - 1];
        if (s < target) { // x 加上后面任意两个数都不超过 s，所以下面的双指针就不需要跑了
            if (target - s < minDiff) {
                minDiff = target - s;
                ans = s;
            }
            continue;
        }

        // 双指针
        let j = i + 1, k = n - 1;
        while (j < k) {
            s = x + nums[j] + nums[k];
            if (s === target) {
                return target;
            }
            if (s > target) {
                if (s - target < minDiff) { // s 与 target 更近
                    minDiff = s - target;
                    ans = s;
                }
                k--;
            } else { // s < target
                if (target - s < minDiff) { // s 与 target 更近
                    minDiff = target - s;
                    ans = s;
                }
                j++;
            }
        }
    }
    return ans;
};
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n^2)$，其中 $n$ 为 $\textit{nums}$ 的长度。排序 $\mathcal{O}(n\log n)$。外层循环枚举第一个数，然后 $\mathcal{O}(n)$ 双指针。所以总的时间复杂度为 $\mathcal{O}(n^2)$。
- 空间复杂度：$\mathcal{O}(1)$，仅用到若干变量（忽略排序的栈开销）。

## 相似题目

- [167. 两数之和 II - 输入有序数组](https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted)
- [15. 三数之和](https://leetcode.cn/problems/3sum/)
- [18. 四数之和](https://leetcode.cn/problems/4sum/)
- [611. 有效三角形的个数](https://leetcode.com/problems/valid-triangle-number/)

## 分类题单

1. [滑动窗口（定长/不定长/多指针）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（矩形系列/字典序最小/贡献法）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/贪心/脑筋急转弯）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)

更多题单，点我个人主页 - 讨论发布。

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)

[往期题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)
